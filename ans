1. Recyclable and Low Fat Products
Input: 
Products table:
+-------------+----------+------------+
| product_id  | low_fats | recyclable |
+-------------+----------+------------+
| 0           | Y        | N          |
| 1           | Y        | Y          |
| 2           | N        | Y          |
| 3           | Y        | Y          |
| 4           | N        | N          |
+-------------+----------+------------+

Ans.# Write your MySQL query statement below
select product_id from Products where low_fats='Y' and recyclable ='Y'
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Find Customer Referee
Input: 
Customer table:
+----+------+------------+
| id | name | referee_id |
+----+------+------------+
| 1  | Will | null       |
| 2  | Jane | null       |
| 3  | Alex | 2          |
| 4  | Bill | null       |
| 5  | Zack | 1          |
| 6  | Mark | 2          |
+----+------+------------+

Ans.select name from customer where referee_id is null or referee_id!=2;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Big Countries

Input: 
World table:
+-------------+-----------+---------+------------+--------------+
| name        | continent | area    | population | gdp          |
+-------------+-----------+---------+------------+--------------+
| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |
| Albania     | Europe    | 28748   | 2831741    | 12960000000  |
| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |
| Andorra     | Europe    | 468     | 78115      | 3712000000   |
| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |
+-------------+-----------+---------+------------+--------------+

Ans.select name,population,area
from World where population>=25000000 or area>= 3000000 ;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Article Views I


Example 1:

Input: 
Views table:
+------------+-----------+-----------+------------+
| article_id | author_id | viewer_id | view_date  |
+------------+-----------+-----------+------------+
| 1          | 3         | 5         | 2019-08-01 |
| 1          | 3         | 6         | 2019-08-02 |
| 2          | 7         | 7         | 2019-08-01 |
| 2          | 7         | 6         | 2019-08-02 |
| 4          | 7         | 1         | 2019-07-22 |
| 3          | 4         | 4         | 2019-07-21 |
| 3          | 4         | 4         | 2019-07-21 |
+------------+-----------+-----------+------------+

Ans.# select author_id as id from Views where viewer_id=author_id group by id ORDER BY id
select distinct author_id as id from views
where author_id = viewer_id
order by id
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Invalid Tweets

Input: 
Tweets table:
+----------+----------------------------------+
| tweet_id | content                          |
+----------+----------------------------------+
| 1        | Vote for Biden                   |
| 2        | Let us make America great again! |
+----------+----------------------------------+

Ans.select tweet_id from Tweets WHERE LENGTH(content) > 15;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Replace Employee ID With The Unique Identifier

Employees table:
+----+----------+
| id | name     |
+----+----------+
| 1  | Alice    |
| 7  | Bob      |
| 11 | Meir     |
| 90 | Winston  |
| 3  | Jonathan |
+----+----------+
EmployeeUNI table:
+----+-----------+
| id | unique_id |
+----+-----------+
| 3  | 1         |
| 11 | 2         |
| 90 | 3         |
+----+-----------+

Ans select u.unique_id,e.name from Employees e left join EmployeeUNI u on e.id=u.id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.Product Sales Analysis I

Input: 
Sales table:
+---------+------------+------+----------+-------+
| sale_id | product_id | year | quantity | price |
+---------+------------+------+----------+-------+ 
| 1       | 100        | 2008 | 10       | 5000  |
| 2       | 100        | 2009 | 12       | 5000  |
| 7       | 200        | 2011 | 15       | 9000  |
+---------+------------+------+----------+-------+
Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 100        | Nokia        |
| 200        | Apple        |
| 300        | Samsung      |
+------------+--------------+

Ans.select s.year, s.price, p.product_name from sales s join product p on s.product_id=p.product_id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.Customer Who Visited but Did Not Make Any Transactions

Input: 
Visits
+----------+-------------+
| visit_id | customer_id |
+----------+-------------+
| 1        | 23          |
| 2        | 9           |
| 4        | 30          |
| 5        | 54          |
| 6        | 96          |
| 7        | 54          |
| 8        | 54          |
+----------+-------------+
Transactions
+----------------+----------+--------+
| transaction_id | visit_id | amount |
+----------------+----------+--------+
| 2              | 5        | 310    |
| 3              | 5        | 300    |
| 9              | 5        | 200    |
| 12             | 1        | 910    |
| 13             | 2        | 970    |
+----------------+----------+--------+

Ans.# Select v.customer_id,COUNT(v.visit_id) AS count_no_trans from visits v left join Transactions t ON v.visit_id = t.visit_id  WHERE t.transaction_id IS NULL GROUP BY v.customer_id;

select customer_id , count(visit_id) as count_no_trans FROM Visits where visit_id not in (SELECT visit_id FROM Transactions)GROUP BY customer_id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.Rising Temperature

Weather table:
+----+------------+-------------+
| id | recordDate | temperature |
+----+------------+-------------+
| 1  | 2015-01-01 | 10          |
| 2  | 2015-01-02 | 25          |
| 3  | 2015-01-03 | 20          |
| 4  | 2015-01-04 | 30          |
+----+------------+-------------+

Ans. select w2.id from weather  w1 join weather w2 on DATEDIFF(W1. recordDate, w2.recordDate)=-1 where w2.temperature >w1.temperature 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. Average Time of Process per Machine


Input: 
Activity table:
+------------+------------+---------------+-----------+
| machine_id | process_id | activity_type | timestamp |
+------------+------------+---------------+-----------+
| 0          | 0          | start         | 0.712     |
| 0          | 0          | end           | 1.520     |
| 0          | 1          | start         | 3.140     |
| 0          | 1          | end           | 4.120     |
| 1          | 0          | start         | 0.550     |
| 1          | 0          | end           | 1.550     |
| 1          | 1          | start         | 0.430     |
| 1          | 1          | end           | 1.420     |
| 2          | 0          | start         | 4.100     |
| 2          | 0          | end           | 4.512     |
| 2          | 1          | start         | 2.500     |
| 2          | 1          | end           | 5.000     |
+------------+------------+---------------+-----------+

Ans.select a.machine_id, round(avg(b.timestamp-a.timestamp),3) as processing_time
from Activity a join Activity b on a.machine_id = b.machine_id
and a.process_id = b.process_id
and a.activity_type = 'start' and b.activity_type='end'
group by a.machine_id
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11.Employee Bonus

Input: 
Employee table:
+-------+--------+------------+--------+
| empId | name   | supervisor | salary |
+-------+--------+------------+--------+
| 3     | Brad   | null       | 4000   |
| 1     | John   | 3          | 1000   |
| 2     | Dan    | 3          | 2000   |
| 4     | Thomas | 3          | 4000   |
+-------+--------+------------+--------+

select e.name , b.bonus from Employee e left join Bonus b on e.empId = b.empId  where bonus <1000 or Bonus is null 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12.Students and Examinations

Input: 
Students table:
+------------+--------------+
| student_id | student_name |
+------------+--------------+
| 1          | Alice        |
| 2          | Bob          |
| 13         | John         |
| 6          | Alex         |
+------------+--------------+
Subjects table:
+--------------+
| subject_name |
+--------------+
| Math         |
| Physics      |
| Programming  |
+--------------+
Examinations table:
+------------+--------------+
| student_id | subject_name |
+------------+--------------+
| 1          | Math         |
| 1          | Physics      |
| 1          | Programming  |
| 2          | Programming  |
| 1          | Physics      |
| 1          | Math         |
| 13         | Math         |
| 13         | Programming  |
| 13         | Physics      |
| 2          | Math         |
| 1          | Math         |
+------------+--------------+

select s.student_id,s.student_name,sub.subject_name,COUNT(e.student_id) AS attended_exams from students s cross join subjects sub
left join Examinations e on s.student_id=e.student_id and sub.subject_name=e.subject_name group by s.student_id, s.student_name,sub.subject_name order by s.student_id,s.student_name
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. Managers with at Least 5 Direct Reports

Input: 
Employee table:
+-----+-------+------------+-----------+
| id  | name  | department | managerId |
+-----+-------+------------+-----------+
| 101 | John  | A          | null      |
| 102 | Dan   | A          | 101       |
| 103 | James | A          | 101       |
| 104 | Amy   | A          | 101       |
| 105 | Anne  | A          | 101       |
| 106 | Ron   | B          | 101       |
+-----+-------+------------+-----------+

Ans select e2.name from employee e1 join employee e2 on e1.managerId=e2.id group by e1.managerId having count(e1.managerId)>=5
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14.Confirmation Rate

Input: 
Signups table:
+---------+---------------------+
| user_id | time_stamp          |
+---------+---------------------+
| 3       | 2020-03-21 10:16:13 |
| 7       | 2020-01-04 13:57:59 |
| 2       | 2020-07-29 23:09:44 |
| 6       | 2020-12-09 10:39:37 |
+---------+---------------------+
Confirmations table:
+---------+---------------------+-----------+
| user_id | time_stamp          | action    |
+---------+---------------------+-----------+
| 3       | 2021-01-06 03:30:46 | timeout   |
| 3       | 2021-07-14 14:00:00 | timeout   |
| 7       | 2021-06-12 11:57:29 | confirmed |
| 7       | 2021-06-13 12:58:28 | confirmed |
| 7       | 2021-06-14 13:59:27 | confirmed |
| 2       | 2021-01-22 00:00:00 | confirmed |
| 2       | 2021-02-28 23:59:59 | timeout   |
+---------+---------------------+-----------+

Ans.select s.user_id ,round(avg(if(c.action="confirmed",1,0)),2) as confirmation_rate from signups s
left join confirmations c
on s.user_id = c.user_id
group by user_id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15.Not Boring Movies

Input: 
Cinema table:
+----+------------+-------------+--------+
| id | movie      | description | rating |
+----+------------+-------------+--------+
| 1  | War        | great 3D    | 8.9    |
| 2  | Science    | fiction     | 8.5    |
| 3  | irish      | boring      | 6.2    |
| 4  | Ice song   | Fantacy     | 8.6    |
| 5  | House card | Interesting | 9.1    |
+----+------------+-------------+--------+
Ans.select id,movie,description , rating from Cinema 
where id%2<>0 and description <>'boring'
order by rating desc;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16.Average Selling Price

Input: 
Prices table:
+------------+------------+------------+--------+
| product_id | start_date | end_date   | price  |
+------------+------------+------------+--------+
| 1          | 2019-02-17 | 2019-02-28 | 5      |
| 1          | 2019-03-01 | 2019-03-22 | 20     |
| 2          | 2019-02-01 | 2019-02-20 | 15     |
| 2          | 2019-02-21 | 2019-03-31 | 30     |
+------------+------------+------------+--------+
UnitsSold table:
+------------+---------------+-------+
| product_id | purchase_date | units |
+------------+---------------+-------+
| 1          | 2019-02-25    | 100   |
| 1          | 2019-03-01    | 15    |
| 2          | 2019-02-10    | 200   |
| 2          | 2019-03-22    | 30    |
+------------+---------------+-------+

Ans.select p.product_id,ifnull(round(sum(p.price*units)/sum(u.units),2),0) as average_price
from Prices p left join UnitsSold u on p.product_id = u.product_id and u.purchase_date  BETWEEN p.Start_date and p.end_date group by p.product_id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17.Project Employees I

Input: 
Project table:
+-------------+-------------+
| project_id  | employee_id |
+-------------+-------------+
| 1           | 1           |
| 1           | 2           |
| 1           | 3           |
| 2           | 1           |
| 2           | 4           |
+-------------+-------------+
Employee table:
+-------------+--------+------------------+
| employee_id | name   | experience_years |
+-------------+--------+------------------+
| 1           | Khaled | 3                |
| 2           | Ali    | 2                |
| 3           | John   | 1                |
| 4           | Doe    | 2                |
+-------------+--------+------------------+

Ans.select p.project_id ,ROUND(SUM(e.experience_years)/count(e.experience_years),2) as average_years   from Project p left join employee e on p.employee_id=e.employee_id group by project_id 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18.Percentage of Users Attended a Contest

Input: 
Users table:
+---------+-----------+
| user_id | user_name |
+---------+-----------+
| 6       | Alice     |
| 2       | Bob       |
| 7       | Alex      |
+---------+-----------+
Register table:
+------------+---------+
| contest_id | user_id |
+------------+---------+
| 215        | 6       |
| 209        | 2       |
| 208        | 2       |
| 210        | 6       |
| 208        | 6       |
| 209        | 7       |
| 209        | 6       |
| 215        | 7       |
| 208        | 7       |
| 210        | 2       |
| 207        | 2       |
| 210        | 7       |
+------------+---------+

Ans.select contest_id,round (count(distinct user_id)*100/(select count(user_id) from users),2) as percentage from register group by contest_id order by percentage desc,contest_id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. Queries Quality and Percentage

Input: 
Queries table:
+------------+-------------------+----------+--------+
| query_name | result            | position | rating |
+------------+-------------------+----------+--------+
| Dog        | Golden Retriever  | 1        | 5      |
| Dog        | German Shepherd   | 2        | 5      |
| Dog        | Mule              | 200      | 1      |
| Cat        | Shirazi           | 5        | 2      |
| Cat        | Siamese           | 3        | 3      |
| Cat        | Sphynx            | 7        | 4      |
+------------+-------------------+----------+--------+
Ans.select query_name ,round(sum(rating/position )/count(query_name ),2) as quality, 
round(sum(case when rating < 3 then 1 else 0 end)/count(query_name)*100,2)as poor_query_percentage 
from Queries group by query_name 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20.Monthly Transactions I

select substr(trans_date,1,7) as month,country, count(id) as trans_count,sum(case when state='approved' then 1 else 0 end) as approved_count,sum(amount) as trans_total_amount,
sum(case when state='approved' then amount else 0 end) as approved_total_amount
from Transactions group by month,country
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21.Immediate Food Delivery II

select round(avg(order_date = customer_pref_delivery_date)*100, 2) as immediate_percentage 
from delivery
where (customer_id,order_date) in (select customer_id,min(order_date) from delivery group by customer_id) ;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22.Game Play Analysis IV

select ROUND((COUNT(distinct player_id)/ (SELECT COUNT(DISTINCT player_id) FROM Activity)),2) as fraction from Activity where(player_id,DATE_SUB(event_date,INTERVAL 1 DAY))IN(select player_id,min(event_date) from activity group by player_id)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23.Number of Unique Subjects Taught by Each Teacher

Ans.select teacher_id, count(distinct subject_id) as cnt from teacher group by  teacher_id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24.User Activity for the Past 30 Days I

Ans.select activity_date as day,count(distinct user_id ) as active_users from Activity where activity_date between DATE_SUB('2019-07-27',INTERVAL 29 DAY) AND '2019-07-27' group by activity_date 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. Product Sales Analysis III

Ans.SELECT B.product_id, S.first_year, B.quantity, B.price FROM (SELECT MIN(year) AS first_year, product_id FROM sales GROUP BY product_id) AS S
LEFT JOIN sales AS B ON B.product_id=S.product_id AND B.year=S.first_year
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26.Classes More Than 5 Students

Ans.select class from courses group by class having count(student)>=5
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27. Find Followers Count

Ans.select user_id , count( DISTINCT follower_id) as followers_count  from Followers group by user_id ORDER BY user_id ASC;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
28. Biggest Single Number

Ans.SELECT MAX(num) AS num FROM(select num from MyNumbers group by num having count(num)=1) as u
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29.Customers Who Bought All Products

Ans.select customer_id from Customer group by customer_id  having count(distinct product_key)=(select count(product_key ) from Product )
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30.The Number of Employees Which Report to Each Employee

Ans.select e2.employee_id ,e2.name,count(*) as reports_count,round(avg(e1.age)) as average_age from employees  e1 join employees  e2 where e1.reports_to = e2.employee_id group by e2.employee_id order by e2.employee_id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
31.Primary Department for Each Employee

Ans.SELECT
        employee_id,
        department_id 
FROM employee
WHERE primary_flag = 'Y' or employee_id IN (SELECT employee_id  FROM employee GROUP BY employee_id HAVING COUNT(*)=1)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
32.Triangle Judgement

Ans.select * ,if(x+y>z and y+z>x and z+x>y,"Yes","No") as triangle FROM Triangle

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
33.Consecutive Numbers

Ans.with cte as
(select * ,LEAD(num,1) OVER() AS next_1, LEAD(num,2) OVER() AS next_2 from logs)
select  distinct num as ConsecutiveNums from cte where num = next_1 and num = next_2 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
34.Product Price at a Given Date

Ans.SELECT p1.product_id, p1.new_price AS price
FROM Products p1
WHERE (p1.product_id, p1.change_date) IN (
        SELECT p3.product_id, MAX(p3.change_date)
        FROM Products p3
        WHERE p3.change_date <= "2019-08-16" 
        GROUP BY p3.product_id
    )
# GROUP BY product_id
UNION
SELECT product_id, 10 AS price
FROM Products
WHERE product_id NOT IN (
        SELECT p3.product_id
        FROM Products p3
        WHERE p3.change_date <= "2019-08-16" 
        GROUP BY p3.product_id
    )
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
35.Last Person to Fit in the Bus

Ans.select person_name from (select *, sum(weight) over(order by turn asc) as cumilative_weight from Queue ) t where cumilative_weight<=1000 order by turn desc
limit 1
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
36.Count Salary Categories

Ans.select 'Low Salary' as category ,(select count(*) from Accounts  where income <20000)as accounts_count 
union all
select 'Average Salary' as category ,(select count(*) from Accounts  where income >=20000 and income <= 50000)as accounts_count
union all
select 'High Salary' as category ,(select count(*) from Accounts  where  income>50000)as accounts_count

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
37.Employees Whose Manager Left the Company

Ans.select employee_id from Employees WHERE salary < 30000
AND manager_id NOT IN (select e1.employee_id  from Employees e1)ORDER BY employee_id;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
38.Exchange Seats

Ans.WITH cte AS (select *,LEAD(id) OVER(ORDER BY id ASC) AS next,LAG(id) OVER(ORDER BY id ASC) AS prev from seat)
SELECT CASE WHEN ((id%2=1)AND next is not Null)THEN next
WHEN(id%2=0)THEN prev
else id END AS id,student from cte 
ORDER BY id
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
39.Movie Rating

Ans.(SELECT u.name AS results
FROM MovieRating m
LEFT JOIN Users u ON m.user_id = u.user_id
GROUP BY m.user_id
ORDER BY COUNT(m.movie_id) DESC, u.name
LIMIT 1)

UNION ALL

(SELECT m.title AS results
FROM MovieRating r 
LEFT JOIN Movies m
ON(r.movie_id = m.movie_id)
WHERE r.created_at LIKE '2020-02%'
GROUP BY r.movie_id
ORDER BY AVG(r.rating) DESC, m.title
LIMIT 1
)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
40.Restaurant Growth

Ans.SELECT visited_on, amount, ROUND(amount/7, 2) average_amount
FROM (
    SELECT DISTINCT visited_on, 
    SUM(amount) OVER(ORDER BY visited_on RANGE BETWEEN INTERVAL 6 DAY   PRECEDING AND CURRENT ROW) amount, 
    MIN(visited_on) OVER() 1st_date 
    FROM Customer
) t
WHERE visited_on>= 1st_date+6;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
41.Friend Requests II: Who Has the Most Friends

Ans.with cte as
(select accepter_id as id ,requester_id  from requestaccepted 
union
select requester_id as id, accepter_id   from requestaccepted )

select id,count(requester_id ) as num from cte group by id order by  num desc limit 1 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
42.Investments in 2016

with cte1 as
(select CONCAT(lat,',',lon) as location
FROM Insurance
GROUP BY lat,lon
HAVING COUNT(pid)>1),
cte2 as
(select DISTINCT i1.*
from Insurance i1 left join
Insurance i2 on i1.tiv_2015 = i2.tiv_2015 
where i1.pid<>i2.pid
AND CONCAT(i1.lat,',',i1.lon) not in (select location from cte1))

select round(sum(tiv_2016 ),2) as tiv_2016  from cte2
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
43.Department Top Three Salaries

Ans.select d.name as Department  ,e.name as Employee ,e.salary from
(select departmentId ,name ,salary ,DENSE_RANK() OVER(PARTITION  BY departmentId  ORDER BY salary desc) as r from Employee )e join department d on d.id=e.departmentId where r<=3
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
44. Fix Names in a Table

Ans.select user_id, concat(UPPER(SUBSTRING(name,1,1)),LOWER(SUBSTRING(name,2,LENGTH(name)-1))) as name from Users order by user_id

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
45 Patients With a Condition

Ans.select patient_id,patient_name,conditions from Patients WHERE conditions LIKE 'DIAB1%' OR conditions LIKE '% DIAB1%';
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
46.Delete Duplicate Emails

Ans.delete p2 from Person p1 join Person p2 on p1.email=p2.email and p1.id<p2.id'
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
47.Second Highest Salary

Ans.select max(salary) as SecondHighestSalary 
from Employee where 
salary not in 
(select max(salary) from Employee);

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
48.Group Sold Products By The Date

Ans.select 
sell_date, count(distinct product) as num_sold, 
group_concat(distinct product) as products 
from activities 
group by sell_date;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
49.List the Products Ordered in a Period

Ans.# Write your MySQL query statement below
select p.product_name, sum(o.unit) as unit from Products p join Orders o on p.product_id=o.product_id where year(o.order_date)='2020' and month(o.order_date)='02' group by p.product_id having sum(o.unit)>=100
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
50.Find Users With Valid E-Mails
Ans.# Write your MySQL query statement below
select * from Users where 
regexp_like(mail,'^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode[.]com')
